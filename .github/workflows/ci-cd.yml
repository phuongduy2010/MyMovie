name: Build → ECR → (optional) EKS deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  APP_NAME: mymovie
  DOCKERFILE_PATH: ./Dockerfile
  BUILD_OUTPUT_PATH: dist
  NODE_VERSION: 22.12

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    # expose secrets as job env (if secret not set, env value will be empty)
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      K8S_DEPLOYMENT_NAME: ${{ secrets.K8S_DEPLOYMENT_NAME }}
      K8S_CONTAINER_NAME: ${{ secrets.K8S_CONTAINER_NAME }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build Angular (production)
        run: |
          npm run build -- --configuration production
        env:
          CI: true

      - name: Configure AWS credentials (only if AWS keys provided)
        if: ${{ env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != '' && env.AWS_REGION != '' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR (only if AWS creds & account/region provided)
        if: ${{ env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != '' && env.AWS_ACCOUNT_ID != '' && env.AWS_REGION != '' }}
        run: |
          aws ecr get-login-password --region "${AWS_REGION}" \
            | docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

      - name: Create ECR repo if not exists (only if ECR info present)
        if: ${{ env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != '' && env.AWS_ACCOUNT_ID != '' && env.AWS_REGION != '' && env.ECR_REPOSITORY != '' }}
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${ECR_REPOSITORY}"

      - name: Build and push Docker image to ECR (only if ECR vars present)
        if: ${{ env.AWS_ACCOUNT_ID != '' && env.AWS_REGION != '' && env.ECR_REPOSITORY != '' }}
        env:
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          full_image="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
          full_image_latest="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest"
          echo "Building image $full_image"
          docker build -f ${{ env.DOCKERFILE_PATH }} -t "$full_image" .
          docker tag "$full_image" "$full_image_latest"
          docker push "$full_image"
          docker push "$full_image_latest"

      - name: (Optional) Deploy to EKS - update deployment image
        if: ${{ env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != '' && env.AWS_ACCOUNT_ID != '' && env.AWS_REGION != '' && env.EKS_CLUSTER_NAME != '' && env.K8S_DEPLOYMENT_NAME != '' && env.K8S_CONTAINER_NAME != '' && env.ECR_REPOSITORY != '' }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          EKS_CLUSTER_NAME: ${{ env.EKS_CLUSTER_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          K8S_DEPLOYMENT: ${{ env.K8S_DEPLOYMENT_NAME }}
          K8S_CONTAINER: ${{ env.K8S_CONTAINER_NAME }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          # configure kubeconfig to talk to EKS
          aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "$AWS_REGION"

          IMAGE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Updating deployment $K8S_DEPLOYMENT container $K8S_CONTAINER to image $IMAGE"

          kubectl -n default set image deployment/"$K8S_DEPLOYMENT" "$K8S_CONTAINER"="$IMAGE" --record
          kubectl -n default rollout status deployment/"$K8S_DEPLOYMENT" --timeout=120s

      - name: Done
        run: echo "Workflow finished."
